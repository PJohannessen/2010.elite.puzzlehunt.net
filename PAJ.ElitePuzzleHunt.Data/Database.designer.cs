#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PAJ.ElitePuzzleHunt.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ElitePuzzleHunt")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLogging(Logging instance);
    partial void UpdateLogging(Logging instance);
    partial void DeleteLogging(Logging instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertPuzzle(Puzzle instance);
    partial void UpdatePuzzle(Puzzle instance);
    partial void DeletePuzzle(Puzzle instance);
    partial void InsertTeamResult(TeamResult instance);
    partial void UpdateTeamResult(TeamResult instance);
    partial void DeleteTeamResult(TeamResult instance);
    partial void InsertPuzzleHint(PuzzleHint instance);
    partial void UpdatePuzzleHint(PuzzleHint instance);
    partial void DeletePuzzleHint(PuzzleHint instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::PAJ.ElitePuzzleHunt.Data.Properties.Settings.Default.ElitePuzzleHuntConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Logging> Loggings
		{
			get
			{
				return this.GetTable<Logging>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Puzzle> Puzzles
		{
			get
			{
				return this.GetTable<Puzzle>();
			}
		}
		
		public System.Data.Linq.Table<TeamResult> TeamResults
		{
			get
			{
				return this.GetTable<TeamResult>();
			}
		}
		
		public System.Data.Linq.Table<PuzzleHint> PuzzleHints
		{
			get
			{
				return this.GetTable<PuzzleHint>();
			}
		}
	}
	
	[Table(Name="dbo.Logging")]
	public partial class Logging : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Time;
		
		private string _Message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public Logging()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Password;
		
		private string _PasswordSalt;
		
		private EntitySet<User> _Users;
		
		private EntitySet<TeamResult> _TeamResults;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    #endregion
		
		public Team()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._TeamResults = new EntitySet<TeamResult>(new Action<TeamResult>(this.attach_TeamResults), new Action<TeamResult>(this.detach_TeamResults));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordSalt", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[Association(Name="Team_User", Storage="_Users", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="Team_TeamResult", Storage="_TeamResults", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<TeamResult> TeamResults
		{
			get
			{
				return this._TeamResults;
			}
			set
			{
				this._TeamResults.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_TeamResults(TeamResult entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamResults(TeamResult entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _TeamId;
		
		private string _Password;
		
		private string _PasswordSalt;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTeamIdChanging(System.Nullable<int> value);
    partial void OnTeamIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    #endregion
		
		public User()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_TeamId", DbType="Int")]
		public System.Nullable<int> TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordSalt", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[Association(Name="Team_User", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Puzzles")]
	public partial class Puzzle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Answer;
		
		private string _Author;
		
		private string _Difficulty;
		
		private EntitySet<TeamResult> _TeamResults;
		
		private EntitySet<PuzzleHint> _PuzzleHints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnDifficultyChanging(string value);
    partial void OnDifficultyChanged();
    #endregion
		
		public Puzzle()
		{
			this._TeamResults = new EntitySet<TeamResult>(new Action<TeamResult>(this.attach_TeamResults), new Action<TeamResult>(this.detach_TeamResults));
			this._PuzzleHints = new EntitySet<PuzzleHint>(new Action<PuzzleHint>(this.attach_PuzzleHints), new Action<PuzzleHint>(this.detach_PuzzleHints));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Answer", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Difficulty", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		public string Difficulty
		{
			get
			{
				return this._Difficulty;
			}
			set
			{
				if ((this._Difficulty != value))
				{
					this.OnDifficultyChanging(value);
					this.SendPropertyChanging();
					this._Difficulty = value;
					this.SendPropertyChanged("Difficulty");
					this.OnDifficultyChanged();
				}
			}
		}
		
		[Association(Name="Puzzle_TeamResult", Storage="_TeamResults", ThisKey="Id", OtherKey="PuzzleId")]
		public EntitySet<TeamResult> TeamResults
		{
			get
			{
				return this._TeamResults;
			}
			set
			{
				this._TeamResults.Assign(value);
			}
		}
		
		[Association(Name="Puzzle_PuzzleHint", Storage="_PuzzleHints", ThisKey="Id", OtherKey="PuzzleId")]
		public EntitySet<PuzzleHint> PuzzleHints
		{
			get
			{
				return this._PuzzleHints;
			}
			set
			{
				this._PuzzleHints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamResults(TeamResult entity)
		{
			this.SendPropertyChanging();
			entity.Puzzle = this;
		}
		
		private void detach_TeamResults(TeamResult entity)
		{
			this.SendPropertyChanging();
			entity.Puzzle = null;
		}
		
		private void attach_PuzzleHints(PuzzleHint entity)
		{
			this.SendPropertyChanging();
			entity.Puzzle = this;
		}
		
		private void detach_PuzzleHints(PuzzleHint entity)
		{
			this.SendPropertyChanging();
			entity.Puzzle = null;
		}
	}
	
	[Table(Name="dbo.TeamResults")]
	public partial class TeamResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamId;
		
		private int _PuzzleId;
		
		private System.DateTime _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private int _TimeOffset;
		
		private EntityRef<Puzzle> _Puzzle;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnPuzzleIdChanging(int value);
    partial void OnPuzzleIdChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnTimeOffsetChanging(int value);
    partial void OnTimeOffsetChanged();
    #endregion
		
		public TeamResult()
		{
			this._Puzzle = default(EntityRef<Puzzle>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[Column(Storage="_TeamId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[Column(Storage="_PuzzleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PuzzleId
		{
			get
			{
				return this._PuzzleId;
			}
			set
			{
				if ((this._PuzzleId != value))
				{
					if (this._Puzzle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPuzzleIdChanging(value);
					this.SendPropertyChanging();
					this._PuzzleId = value;
					this.SendPropertyChanged("PuzzleId");
					this.OnPuzzleIdChanged();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TimeOffset", DbType="Int NOT NULL")]
		public int TimeOffset
		{
			get
			{
				return this._TimeOffset;
			}
			set
			{
				if ((this._TimeOffset != value))
				{
					this.OnTimeOffsetChanging(value);
					this.SendPropertyChanging();
					this._TimeOffset = value;
					this.SendPropertyChanged("TimeOffset");
					this.OnTimeOffsetChanged();
				}
			}
		}
		
		[Association(Name="Puzzle_TeamResult", Storage="_Puzzle", ThisKey="PuzzleId", OtherKey="Id", IsForeignKey=true)]
		public Puzzle Puzzle
		{
			get
			{
				return this._Puzzle.Entity;
			}
			set
			{
				Puzzle previousValue = this._Puzzle.Entity;
				if (((previousValue != value) 
							|| (this._Puzzle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Puzzle.Entity = null;
						previousValue.TeamResults.Remove(this);
					}
					this._Puzzle.Entity = value;
					if ((value != null))
					{
						value.TeamResults.Add(this);
						this._PuzzleId = value.Id;
					}
					else
					{
						this._PuzzleId = default(int);
					}
					this.SendPropertyChanged("Puzzle");
				}
			}
		}
		
		[Association(Name="Team_TeamResult", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamResults.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamResults.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PuzzleHints")]
	public partial class PuzzleHint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PuzzleId;
		
		private string _Hint;
		
		private int _MinutesBeforeReveal;
		
		private EntityRef<Puzzle> _Puzzle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPuzzleIdChanging(int value);
    partial void OnPuzzleIdChanged();
    partial void OnHintChanging(string value);
    partial void OnHintChanged();
    partial void OnMinutesBeforeRevealChanging(int value);
    partial void OnMinutesBeforeRevealChanged();
    #endregion
		
		public PuzzleHint()
		{
			this._Puzzle = default(EntityRef<Puzzle>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_PuzzleId", DbType="Int NOT NULL")]
		public int PuzzleId
		{
			get
			{
				return this._PuzzleId;
			}
			set
			{
				if ((this._PuzzleId != value))
				{
					if (this._Puzzle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPuzzleIdChanging(value);
					this.SendPropertyChanging();
					this._PuzzleId = value;
					this.SendPropertyChanged("PuzzleId");
					this.OnPuzzleIdChanged();
				}
			}
		}
		
		[Column(Storage="_Hint", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Hint
		{
			get
			{
				return this._Hint;
			}
			set
			{
				if ((this._Hint != value))
				{
					this.OnHintChanging(value);
					this.SendPropertyChanging();
					this._Hint = value;
					this.SendPropertyChanged("Hint");
					this.OnHintChanged();
				}
			}
		}
		
		[Column(Storage="_MinutesBeforeReveal", DbType="Int NOT NULL")]
		public int MinutesBeforeReveal
		{
			get
			{
				return this._MinutesBeforeReveal;
			}
			set
			{
				if ((this._MinutesBeforeReveal != value))
				{
					this.OnMinutesBeforeRevealChanging(value);
					this.SendPropertyChanging();
					this._MinutesBeforeReveal = value;
					this.SendPropertyChanged("MinutesBeforeReveal");
					this.OnMinutesBeforeRevealChanged();
				}
			}
		}
		
		[Association(Name="Puzzle_PuzzleHint", Storage="_Puzzle", ThisKey="PuzzleId", OtherKey="Id", IsForeignKey=true)]
		public Puzzle Puzzle
		{
			get
			{
				return this._Puzzle.Entity;
			}
			set
			{
				Puzzle previousValue = this._Puzzle.Entity;
				if (((previousValue != value) 
							|| (this._Puzzle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Puzzle.Entity = null;
						previousValue.PuzzleHints.Remove(this);
					}
					this._Puzzle.Entity = value;
					if ((value != null))
					{
						value.PuzzleHints.Add(this);
						this._PuzzleId = value.Id;
					}
					else
					{
						this._PuzzleId = default(int);
					}
					this.SendPropertyChanged("Puzzle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
